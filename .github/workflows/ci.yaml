name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install pylint
        run: |
          pip install pylint

      - name: Install black
        run: |
          pip install black

      - name: Run Lint check
        id: lint
        run: |
          pylint src/app.py src/app_test.py

      - name: Format check
        run: |
          black src/app.py src/app_test.py

      - name: Run Unit tests
        run: |
          pytest

      - name: Build Docker Image
        run: |
          docker build -t myapp:${{ github.sha }} .

  security_tests:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Authenticate Snyk
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk tests (DAST)
        run: |
          snyk test

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget -q https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz -O trivy_Linux-64bit.tar.gz
          if [ $? -eq 0 ]; then
            echo "Download completed successfully."
          else
            echo "Download failed." && exit 1
          fi
          tar -zxvf trivy_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/
          rm trivy_Linux-64bit.tar.gz

      - name: Run Trivy scan
        run: |
          trivy fs --exit-code 1 --severity HIGH,CRITICAL .

      - name: Install SonarCloud
        run: |
          curl -sS https://sonarcloud.io/static/cicd/sonarcloud-action.sh | bash -s

      - name: Run SonarCloud scan (SAST)
        run: |
          sonar-scanner

  push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: security_tests
    if: success()
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker tag myapp:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}
