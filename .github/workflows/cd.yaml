name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create Kind cluster
        uses: helm/kind-action@v1.7.0
        with:
          cluster_name: kind
          wait: 60s

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy MySQL to Kubernetes
        run: |
          if [ -f "k8/mysql-deployment.yaml" ]; then
            kubectl apply -f k8/mysql-deployment.yaml
            echo "MySQL deployment applied."
          else
            echo "MySQL deployment file not found, skipping"
          fi

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL pod to be ready..."
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=120s
          echo "MySQL is ready!"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and load Docker image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.event.workflow_run.head_sha }}"
          echo "Pulling image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          kind load docker-image $IMAGE_TAG

      - name: Deploy application to Kubernetes
        run: |
          if [ -d "k8" ]; then
            # Apply all Kubernetes manifests except mysql (to avoid recreating)
            find k8/ -name "*.yaml" -o -name "*.yml" | grep -v mysql | xargs -I {} kubectl apply -f {}
            echo "Application deployment applied."
          else
            echo "ERROR: k8 directory not found"
            exit 1
          fi

      - name: Verify deployment
        run: |
          kubectl get pods,svc -A

      - name: Install MySQL client for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL pod to be ready..."
          
          # First, wait for the pod to be created and running
          echo "Waiting for MySQL pod to be created..."
          for i in {1..30}; do
            if kubectl get pods -l app=mysql 2>/dev/null | grep -q "mysql"; then
              echo "MySQL pod found"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: MySQL pod never created"
              kubectl get all
              exit 1
            fi
            sleep 2
          done
          
          # Wait for pod to be in Running state
          echo "Waiting for MySQL pod to be running..."
          kubectl wait --for=jsonpath='{.status.phase}'=Running pod -l app=mysql --timeout=120s
          
          # Get pod name for debugging
          MYSQL_POD=$(kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}')
          echo "MySQL pod name: $MYSQL_POD"
          
          # Check pod status in detail
          echo "Pod status:"
          kubectl get pod $MYSQL_POD -o wide
          echo ""
          echo "Pod conditions:"
          kubectl describe pod $MYSQL_POD | grep -A 10 "Conditions:"
          
          # Wait for readiness with longer timeout
          echo "Waiting for MySQL to become ready..."
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=180s
          
          # Additional verification
          echo "Testing MySQL connection internally..."
          kubectl exec $MYSQL_POD -- mysql -u root -prootpassword -e "SELECT 1;" || echo "Direct connection test failed"
          
          echo "MySQL is ready!"

      - name: Set up Flyway
        run: |
          # Install Flyway
          FLYWAY_VERSION="11.11.2"
          wget -q "https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz"
          tar -xzf flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz
          sudo ln -sf $(pwd)/flyway-${FLYWAY_VERSION}/flyway /usr/local/bin/flyway
          flyway -version

      - name: Verify SQL migration files
        run: |
          echo "Checking SQL migration directory structure:"
          if [ -d "./src" ]; then
            echo "SQL files found in src folder:"
            ls -la ./src/*.sql
          else
            echo "ERROR: src directory not found!"
            exit 1
          fi

      - name: Apply database migrations with Flyway
        run: |
          echo "Applying database migrations..."
          
          # Create a flyway config that connects to the in-cluster MySQL service
          cat > /tmp/flyway.conf << EOF
          flyway.url=jdbc:mysql://mysql-service:3306/myapp?useSSL=false&allowPublicKeyRetrieval=true
          flyway.user=myuser
          flyway.password=mypassword
          flyway.locations=filesystem:./src
          flyway.schemas=myapp
          flyway.cleanDisabled=true
          flyway.validateOnMigrate=true
          flyway.outOfOrder=false
          flyway.baselineOnMigrate=true
          flyway.driver=com.mysql.cj.jdbc.Driver
          flyway.connectRetries=10
          flyway.connectRetriesInterval=3000
          EOF
          
          echo "Using Flyway configuration:"
          cat /tmp/flyway.conf | sed 's/password=.*/password=******/'
          
          # Run Flyway with the processed config file
          timeout 120s flyway -configFiles=/tmp/flyway.conf migrate || \
          (echo "Flyway migration failed or timed out"; exit 1)
          
          echo "Migration completed successfully"

      - name: Verify final deployment
        run: |
          echo "Final deployment status:"
          kubectl get pods,svc -A
          echo "Application logs:"
          kubectl logs deployment/myapp-deployment || echo "Could not get application logs"