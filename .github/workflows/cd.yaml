name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Display CI workflow information
        run: |
          echo "CI Workflow: ${{ github.event.workflow_run.name }}"
          echo "CI Status: ${{ github.event.workflow_run.conclusion }}"
          echo "Commit SHA: ${{ github.event.workflow_run.head_sha }}"

      - name: Set up kind cluster
        uses: helm/kind-action@v1.7.0

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify Kubernetes cluster is up
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Set up Docker CLI
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          docker --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.event.workflow_run.head_sha }}"
          echo "Pulling image: $IMAGE_TAG"
          kind load docker-image $IMAGE_TAG

      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to kind cluster..."
          if [ -d "k8" ]; then
            kubectl apply -f k8/
            echo "Deployment applied."
          else
            echo "ERROR: k8 directory not found"
            exit 1
          fi

      - name: Verify Kubernetes deployment
        run: |
          echo "Waiting for pods to start..."
          sleep 20
          kubectl get pods -A
          kubectl get svc -A
          
      - name: Install MySQL client for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Test database connectivity
        run: |
          echo "Testing database connectivity to: ${{ secrets.DB_HOST }}:${{ secrets.DB_PORT || '3306' }}"
          
          # Test basic network connectivity
          timeout 30s bash -c 'until nc -zv $0 $1; do echo "Waiting for database..."; sleep 2; done' ${{ secrets.DB_HOST }} ${{ secrets.DB_PORT || '3306' }} || \
          echo "Network connectivity test failed"
          
          # Test MySQL connection
          timeout 30s mysql -h ${{ secrets.DB_HOST }} -P ${{ secrets.DB_PORT || '3306' }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "SELECT 1;" ${{ secrets.DB_NAME }} && \
          echo "Database connection successful" || \
          echo "Database connection failed - check credentials and network access"

      - name: Set up Flyway (latest version)
        run: |
          # Install latest Flyway version to avoid warnings
          FLYWAY_VERSION="11.11.2"
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${FLYWAY_VERSION}/flyway-commandline-${FLYWAY_VERSION}-linux-x64.tar.gz | tar xvz
          sudo ln -sf $(pwd)/flyway-${FLYWAY_VERSION}/flyway /usr/local/bin/flyway
          flyway -version

      - name: Verify SQL migration files
        run: |
          echo "Checking SQL migration directory structure:"
          if [ -d "./sql" ]; then
            echo "SQL files found:"
            ls -la ./sql/*.sql
          else
            echo "ERROR: sql directory not found!"
            exit 1
          fi

      - name: Apply database migrations with Flyway
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT || '3306' }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "Applying database migrations..."
          
          # Create a simple flyway config without using the file (to avoid envsubst issues)
          cat > /tmp/flyway.conf << EOF
          flyway.url=jdbc:mysql://$DB_HOST:$DB_PORT/$DB_NAME?useSSL=false&allowPublicKeyRetrieval=true&connectTimeout=60000&socketTimeout=60000
          flyway.user=$DB_USER
          flyway.password=$DB_PASSWORD
          flyway.locations=filesystem:./sql
          flyway.schemas=$DB_NAME
          flyway.connectRetries=3
          flyway.connectRetriesInterval=3000
          EOF
          
          echo "Using Flyway configuration:"
          cat /tmp/flyway.conf | sed 's/password=.*/password=******/'
          
          # Run Flyway with timeout to prevent hanging
          timeout 120s flyway -configFiles=/tmp/flyway.conf migrate || \
          (echo "Flyway migration failed or timed out"; exit 1)
          
          echo "Migration completed successfully"
