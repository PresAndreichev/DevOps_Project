name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Display CI workflow information
        run: |
          echo "CI Workflow: ${{ github.event.workflow_run.name }}"
          echo "CI Status: ${{ github.event.workflow_run.conclusion }}"
          echo "Commit SHA: ${{ github.event.workflow_run.head_sha }}"

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create Kind cluster
        uses: helm/kind-action@v1.7.0
        with:
          cluster_name: kind
          wait: 60s

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Create MySQL Secret from GitHub Secrets
        run: |
          kubectl create secret generic mysql-secret \
            --from-literal=root-password="${{ secrets.MYSQL_ROOT_PASSWORD }}" \
            --from-literal=database-password="${{ secrets.MYSQL_DATABASE_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "MySQL secret created successfully"

      - name: Create MySQL ConfigMap
        run: |
          kubectl apply -f - <<'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: mysql-config
          data:
            database: "myapp"
            user: "myuser"
          EOF

      - name: Deploy MySQL
        run: |
          kubectl apply -f - <<'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mysql
          spec:
            selector:
              matchLabels:
                app: mysql
            template:
              metadata:
                labels:
                  app: mysql
              spec:
                containers:
                  - name: mysql
                    image: mysql:8.0.33
                    env:
                      - name: MYSQL_ROOT_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mysql-secret
                            key: root-password
                      - name: MYSQL_DATABASE
                        valueFrom:
                          configMapKeyRef:
                            name: mysql-config
                            key: database
                      - name: MYSQL_USER
                        valueFrom:
                          configMapKeyRef:
                            name: mysql-config
                            key: user
                      - name: MYSQL_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mysql-secret
                            key: database-password
                    ports:
                      - containerPort: 3306
                    resources:
                      requests:
                        memory: "256Mi"
                        cpu: "100m"
                    volumeMounts:
                      - name: mysql-storage
                        mountPath: /var/lib/mysql
                    readinessProbe:
                      tcpSocket:
                        port: 3306
                      initialDelaySeconds: 15
                      periodSeconds: 5
                      timeoutSeconds: 3
                      failureThreshold: 5
                    livenessProbe:
                      tcpSocket:
                        port: 3306
                      initialDelaySeconds: 30
                      periodSeconds: 10
                volumes:
                  - name: mysql-storage
                    emptyDir: {}
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: mysql-service
          spec:
            selector:
              app: mysql
            ports:
              - port: 3306
                targetPort: 3306
          EOF

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL pod to be ready..."

          echo "Waiting for MySQL pod to be created..."
          for i in {1..30}; do
            if kubectl get pods -l app=mysql 2>/dev/null | grep -q "mysql"; then
              echo "MySQL pod found"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "ERROR: MySQL pod never created"
              kubectl get all
              exit 1
            fi
            sleep 2
          done

          echo "Waiting for MySQL pod to be running..."
          kubectl wait --for=jsonpath='{.status.phase}'=Running pod -l app=mysql --timeout=120s

          echo "Waiting for MySQL to become ready..."
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=180s

          echo "MySQL is ready!"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and load Docker image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.event.workflow_run.head_sha }}"
          echo "Pulling image: $IMAGE_TAG"
          docker pull $IMAGE_TAG
          kind load docker-image $IMAGE_TAG

      - name: Deploy application to Kubernetes
        run: |
          if [ -d "k8" ]; then
            find k8/ -name "*.yaml" -o -name "*.yml" | grep -v mysql | xargs -I {} kubectl apply -f {}
            echo "Application deployment applied."
          else
            echo "ERROR: k8 directory not found"
            exit 1
          fi

      - name: Verify deployment
        run: |
          kubectl get pods,svc -A

      - name: Install MySQL client for testing
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Test database connectivity within cluster
        run: |
          echo "Testing database connectivity to MySQL service in cluster..."
          MYSQL_POD=$(kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}')
          for i in {1..10}; do
            if kubectl exec $MYSQL_POD -- mysql -h 127.0.0.1 -P 3306 -u myuser -p"${{ secrets.MYSQL_DATABASE_PASSWORD }}" -e "SELECT 1;" myapp; then
              echo "Database connection successful"
              break
            else
              echo "Attempt $i/10: Database not ready yet"
              sleep 5
            fi
          done

      - name: Create Flyway SQL ConfigMap
        run: |
          kubectl create configmap flyway-sql \
            --from-file=sql/ \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply database migrations with Flyway inside cluster
        env:
          DB_HOST: mysql-service
          DB_PORT: 3306
          DB_NAME: myapp
          DB_USER: myuser
          DB_PASSWORD: ${{ secrets.MYSQL_DATABASE_PASSWORD }}
        run: |
          kubectl run flyway \
            --restart=Never \
            --image=flyway/flyway:9.22.0 \
            --overrides='
            {
              "spec": {
                "containers": [{
                  "name": "flyway",
                  "image": "flyway/flyway:9.22.0",
                  "env": [
                    {"name":"DB_HOST","value":"'"$DB_HOST"'"},
                    {"name":"DB_PORT","value":"'"$DB_PORT"'"},
                    {"name":"DB_NAME","value":"'"$DB_NAME"'"},
                    {"name":"DB_USER","value":"'"$DB_USER"'"},
                    {"name":"DB_PASSWORD","value":"'"$DB_PASSWORD"'"}
                  ],
                  "volumeMounts": [{
                    "mountPath": "/flyway/sql",
                    "name": "flyway-sql"
                  }],
                  "args": [
                    "migrate",
                    "-url=jdbc:mysql://'"$DB_HOST"':'"$DB_PORT"'/'"$DB_NAME"'?useSSL=false&allowPublicKeyRetrieval=true",
                    "-user='"$DB_USER"'",
                    "-password='"$DB_PASSWORD"'",
                    "-locations=filesystem:/flyway/sql",
                    "-baselineOnMigrate=true",
                    "-connectRetries=10"
                  ]
                }],
                "volumes": [{
                  "name": "flyway-sql",
                  "configMap": {"name": "flyway-sql"}
                }]
              }
            }'

          kubectl wait --for=condition=Succeeded pod/flyway --timeout=300s
          kubectl delete pod flyway || true

      - name: Verify final deployment
        run: |
          echo "Final deployment status:"
          kubectl get pods,svc -A
          echo "Application logs:"
          kubectl logs deployment/myapp-deployment || echo "Could not get application logs"
